{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/categorize-expense.ts"],"sourcesContent":["// use server'\n'use server';\n\n/**\n * @fileOverview Categoriza automáticamente los gastos basándose en una descripción proporcionada por el usuario.\n *\n * - autoCategorizeExpense - Una función que maneja el proceso de categorización de gastos.\n * - AutoCategorizeExpenseInput - El tipo de entrada para la función autoCategorizeExpense.\n * - AutoCategorizeExpenseOutput - El tipo de retorno para la función autoCategorizeExpense.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst AutoCategorizeExpenseInputSchema = z.object({\n  description: z\n    .string()\n    .describe('La descripción del gasto a categorizar.'),\n});\nexport type AutoCategorizeExpenseInput = z.infer<typeof AutoCategorizeExpenseInputSchema>;\n\nconst AutoCategorizeExpenseOutputSchema = z.object({\n  category: z\n    .string()\n    .describe(\n      'La categoría predicha del gasto (e.g., Food, Transport, Rent, Utilities, Entertainment).' // Categories from the original prompt.\n    ),\n  confidence: z\n    .number()\n    .describe(\n      'Un puntaje de confianza (0 a 1) que indica la certeza de la predicción de la categoría.'\n    ),\n});\nexport type AutoCategorizeExpenseOutput = z.infer<typeof AutoCategorizeExpenseOutputSchema>;\n\nexport async function autoCategorizeExpense(\n  input: AutoCategorizeExpenseInput\n): Promise<AutoCategorizeExpenseOutput> {\n  return autoCategorizeExpenseFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'autoCategorizeExpensePrompt',\n  input: {schema: AutoCategorizeExpenseInputSchema},\n  output: {schema: AutoCategorizeExpenseOutputSchema},\n  prompt: `Eres un asistente experto en finanzas personales. Tu trabajo es categorizar los gastos basándose en la descripción proporcionada por el usuario.\n\n  Dada la siguiente descripción, determina la categoría de gasto más probable y un puntaje de confianza.\n\n  Descripción: {{{description}}}\n\n  Categorías para elegir: Food, Transport, Rent, Utilities, Entertainment\n\n  Asegúrate de que el campo de categoría contenga SOLAMENTE un valor de la lista de categorías aceptables. Emite la categoría y un puntaje de confianza entre 0 y 1.\n  `,\n});\n\nconst autoCategorizeExpenseFlow = ai.defineFlow(\n  {\n    name: 'autoCategorizeExpenseFlow',\n    inputSchema: AutoCategorizeExpenseInputSchema,\n    outputSchema: AutoCategorizeExpenseOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,cAAc;;;;;;AAGd;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,aAAa,uIAAA,CAAA,IAAC,CACX,MAAM,GACN,QAAQ,CAAC;AACd;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,UAAU,uIAAA,CAAA,IAAC,CACR,MAAM,GACN,QAAQ,CACP,2FAA2F,uCAAuC;;IAEtI,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CACP;AAEN;AAGO,eAAe,sBACpB,KAAiC;IAEjC,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;EAST,CAAC;AACH;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 297, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/personalized-recommendations.ts"],"sourcesContent":["// ExpensePilot: Personalized Expense Recommendations\n// Provides personalized recommendations for users to reduce expenses based on their spending patterns.\n\n'use server';\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\n// Input schema for personalized expense recommendations.\nconst PersonalizedExpenseRecommendationsInputSchema = z.object({\n  monthlyIncome: z.number().describe(\"El ingreso mensual total del usuario.\"),\n  expenses: z.array(\n    z.object({\n      name: z.string().describe(\"El nombre del gasto.\"),\n      category: z.string().describe(\"La categoría del gasto (e.g., Food, Transport, Rent).\"),\n      amount: z.number().describe(\"El monto gastado en el gasto.\"),\n      date: z.string().describe(\"La fecha del gasto (YYYY-MM-DD).\"),\n    })\n  ).describe(\"Una lista de los gastos del usuario para el mes.\"),\n  financialGoals: z.string().optional().describe(\"Los objetivos financieros del usuario.\"),\n});\nexport type PersonalizedExpenseRecommendationsInput = z.infer<typeof PersonalizedExpenseRecommendationsInputSchema>;\n\n// Output schema for personalized expense recommendations.\nconst PersonalizedExpenseRecommendationsOutputSchema = z.object({\n  recommendations: z.array(\n    z.object({\n      category: z.string().describe(\"La categoría de gasto a la que se aplica la recomendación.\"),\n      recommendation: z.string().describe(\"Una recomendación específica para reducir gastos en esta categoría.\"),\n      potentialSavings: z.number().optional().describe(\"El ahorro potencial de seguir esta recomendación.\"),\n    })\n  ).describe(\"Una lista de recomendaciones personalizadas para reducir gastos.\"),\n  summary: z.string().describe(\"Un resumen de las recomendaciones y la salud financiera general.\"),\n});\nexport type PersonalizedExpenseRecommendationsOutput = z.infer<typeof PersonalizedExpenseRecommendationsOutputSchema>;\n\n// Function to get personalized expense recommendations.\nexport async function getPersonalizedExpenseRecommendations(\n  input: PersonalizedExpenseRecommendationsInput\n): Promise<PersonalizedExpenseRecommendationsOutput> {\n  return personalizedExpenseRecommendationsFlow(input);\n}\n\n// Define the prompt for personalized expense recommendations.\nconst personalizedExpenseRecommendationsPrompt = ai.definePrompt({\n  name: 'personalizedExpenseRecommendationsPrompt',\n  input: {schema: PersonalizedExpenseRecommendationsInputSchema},\n  output: {schema: PersonalizedExpenseRecommendationsOutputSchema},\n  prompt: `Eres un asesor financiero de IA que ofrece recomendaciones personalizadas para reducir gastos.\n\n  Analiza los ingresos mensuales, los gastos y los objetivos financieros del usuario para proporcionar recomendaciones prácticas.\n\n  Ingreso Mensual: {{monthlyIncome}}\n  Gastos:\n  {{#each expenses}}\n  - {{name}} ({{category}}): {{amount}} el {{date}}\n  {{/each}}\n  Objetivos Financieros: {{financialGoals}}\n\n  Proporciona una lista de recomendaciones, cada una incluyendo la categoría, la recomendación específica y los ahorros potenciales.\n  Además, incluye un resumen de las recomendaciones y la salud financiera general.\n  `,\n});\n\n// Define the Genkit flow for personalized expense recommendations.\nconst personalizedExpenseRecommendationsFlow = ai.defineFlow(\n  {\n    name: 'personalizedExpenseRecommendationsFlow',\n    inputSchema: PersonalizedExpenseRecommendationsInputSchema,\n    outputSchema: PersonalizedExpenseRecommendationsOutputSchema,\n  },\n  async input => {\n    const {output} = await personalizedExpenseRecommendationsPrompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,qDAAqD;AACrD,uGAAuG;;;;;;AAIvG;AACA;AAAA;;;;;;AAEA,yDAAyD;AACzD,MAAM,gDAAgD,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7D,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACnC,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CACf,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC1B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC5B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC5B,IACA,QAAQ,CAAC;IACX,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AACjD;AAGA,0DAA0D;AAC1D,MAAM,iDAAiD,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9D,iBAAiB,uIAAA,CAAA,IAAC,CAAC,KAAK,CACtB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QAC9B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;QACpC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;IACnD,IACA,QAAQ,CAAC;IACX,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAIO,eAAe,sCACpB,KAA8C;IAE9C,OAAO,uCAAuC;AAChD;AAEA,8DAA8D;AAC9D,MAAM,2CAA2C,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC/D,MAAM;IACN,OAAO;QAAC,QAAQ;IAA6C;IAC7D,QAAQ;QAAC,QAAQ;IAA8C;IAC/D,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,mEAAmE;AACnE,MAAM,yCAAyC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1D;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,yCAAyC;IAChE,OAAO;AACT;;;IArCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 379, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {autoCategorizeExpense as '40c10d7658bf7e90f88bbcea3cbfd9db5da43ad02b'} from 'ACTIONS_MODULE0'\nexport {getPersonalizedExpenseRecommendations as '40c677396f938d060a8bda31566760c1cded4e7f1a'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/expense-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ExpenseDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call ExpenseDashboard() from the server but ExpenseDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/expense-dashboard.tsx <module evaluation>\",\n    \"ExpenseDashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,sEACA","debugId":null}},
    {"offset": {"line": 451, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/components/expense-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const ExpenseDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call ExpenseDashboard() from the server but ExpenseDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/expense-dashboard.tsx\",\n    \"ExpenseDashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,mBAAmB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAClD;IAAa,MAAM,IAAI,MAAM;AAAgP,GAC7Q,kDACA","debugId":null}},
    {"offset": {"line": 465, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/page.tsx"],"sourcesContent":["import { ExpenseDashboard } from \"@/components/expense-dashboard\";\n\nexport default function Home() {\n  return <ExpenseDashboard />;\n}\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBAAO,8OAAC,0IAAA,CAAA,mBAAgB;;;;;AAC1B","debugId":null}}]
}